
import com.maxeler.maxcompiler.v0.utils.MathUtils;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

class BasicCSRPSpMVKernel extends Kernel {

    private static final DFEType scalarValueType = dfeFloat(8, 24);
    private static final DFEType scalarIndexType = dfeUInt(32);

    private final int m_numPipes;
    private final int m_numCols;

    // here we put the length of the whole loop into kernel parameter
    BasicCSRPSpMVKernel(KernelParameters parameters, int numCols, int numPipes, int loopLength) {
        super(parameters);
        m_numPipes = numPipes;
        m_numCols = numCols;
        
        DFEVectorType<DFEVar> vectorValueType = new DFEVectorType<DFEVar>(scalarValueType, m_numPipes);
        DFEVectorType<DFEVar> vectorIndexType = new DFEVectorType<DFEVar>(scalarIndexType, m_numPipes);

        DFEType addressType = dfeUInt(MathUtils.bitsToAddress(m_numCols));

        DFEVar maxColWidth = io.scalarInput("maxColWidth", dfeUInt(32));

        CounterChain chain = control.count.makeCounterChain();
        DFEVar x = chain.addCounter(maxColWidth, 1);
        DFEVar loopCounter = chain.addCounter(loopLength, 1);
        
        DFEVector<DFEVar> input = io.input("input", vectorValueType, loopCounter === 0);
        DFEVector<DFEVar> index = io.input("index", vectorIndexType, loopCounter === 0);

        DFEVar[] carriedSums = new DFEVar[m_numPipes];
        DFEVector<DFEVar> newSums = vectorValueType.newInstance(this);
        
        for (int i = 0; i < m_numPipes; i++) {
            Memory<DFEVar> vectorRom = mem.alloc(scalarValueType, numCols);
            vectorRom.mapToCPU(String.format("vectorRom%04d", i));

            DFEVar value = vectorRom.read(index[i].cast(addressType));

            carriedSums[i] = scalarValueType.newInstance(this);
            DFEVar sum = x === 0 ? 0.0 : carriedSums[i];
            newSums[i] <== sum + input[i] * value;
            carriedSums[i] <== stream.offset(newSums[i], -loopLength);
        }
        
        io.output("output", newSums, vectorValueType, loopCounter === (loopLength-1));
    }
}

